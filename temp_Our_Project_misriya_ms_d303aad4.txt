[CODE CELL]
pip install tensorflow


[CODE CELL]
pip install --upgrade tensorflow


[CODE CELL]
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import random
import tensorflow as tf
from tensorflow.keras.layers import Rescaling

#importing the Convolution Layer 2d
from tensorflow.keras.layers import Conv2D,MaxPooling2D,Dense,Flatten
import warnings
warnings.filterswarnings=('ignore')

[CODE CELL]
#loading the dataset
df=tf.keras.preprocessing.image_dataset_from_directory(r"C:\Users\postb\OneDrive\Desktop\Capstone Projects\Rice Leaf\PRCP-1001-RiceLeaf\Data",seed=123,
    shuffle=True,
    image_size=(256,256),
    batch_size=32
)

[CODE CELL]
classes=df.class_names
classes

[CODE CELL]
plt.figure(figsize=(15, 15))
for image_batch, labels_batch in df.take(7):
    for i in range(10):
        ax = plt.subplot(5,2, i + 1)
        plt.imshow(image_batch[i].numpy().astype("uint8"))
        plt.title(classes[labels_batch[i]])
        plt.axis("off")

[MARKDOWN CELL]
## Splitting Train ,Validation & Test Data

[CODE CELL]
def get_dataset_partitions_tf(ds, train_split=0.8, val_split=0.1, test_split=0.1, shuffle=True, shuffle_size=10000):
    assert (train_split + test_split + val_split) == 1

    ds_size = len(ds)

    if shuffle:
        ds = ds.shuffle(shuffle_size, seed=12)

    train_size = int(train_split * ds_size)
    val_size = int(val_split * ds_size)

    train_ds = ds.take(train_size)
    val_ds = ds.skip(train_size).take(val_size)
    test_ds = ds.skip(train_size).skip(val_size)

    return train_ds, val_ds, test_ds

[CODE CELL]
train_ds, val_ds, test_ds = get_dataset_partitions_tf(df)

[MARKDOWN CELL]
## Cache, Shuffle, and Prefetch the Dataset## Cache, Shuffle, and Prefetch the Dataset

[CODE CELL]
#Rescaling and resizing the images properly
from tensorflow.keras import layers
resize_and_rescale = tf.keras.Sequential([
    layers.Resizing(256, 256),  # Resizing moved to `layers`
    layers.Rescaling(1./255),  # Rescaling moved to `layers`
])


[MARKDOWN CELL]
# Data Augmentation

[CODE CELL]
# rotating and flipping the images
data_augmentation = tf.keras.Sequential([
  layers.RandomFlip("horizontal_and_vertical"),
  layers.RandomRotation(0.2),
])

[CODE CELL]
#inserting the augmented data
train_ds = train_ds.map(lambda x, y: (data_augmentation(x, training=True), y)).prefetch(buffer_size=tf.data.AUTOTUNE)

[MARKDOWN CELL]
# Model Architecture

[CODE CELL]
from tensorflow.keras import models
input_shape = (32, 256, 256, 3)
n_classes = 3

model = models.Sequential([
    resize_and_rescale,
    layers.Conv2D(32, kernel_size = (3,3), activation='relu', input_shape=input_shape),
    layers.MaxPooling2D((2, 2)),
    layers.Dropout(0.2),

    layers.Conv2D(64,  kernel_size = (3,3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Dropout(0.2),

    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Dropout(0.2),

    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Dropout(0.2),

    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(n_classes, activation='softmax'),
])

model.build(input_shape=input_shape)

[CODE CELL]
#checking the summary
model.summary()

[MARKDOWN CELL]
## Compling the Model

[CODE CELL]
#compiling the model
model.compile(
    optimizer='adam',
    loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=False),
    metrics=['accuracy']
)

[CODE CELL]
history = model.fit(
    train_ds,
    batch_size=32,
    validation_data=val_ds,
    verbose=1,
    epochs=60,
)

[CODE CELL]
train_scores = model.evaluate(train_ds)
test_scores = model.evaluate(test_ds)

[MARKDOWN CELL]
# Checking the Image Prediction

[CODE CELL]

for images_batch, labels_batch in test_ds.take(2):

    first_image = images_batch[19].numpy().astype('uint8')
    first_label = labels_batch[19].numpy()

    print("first image to predict")
    plt.imshow(first_image)
    print("actual label:",classes[first_label])

    batch_prediction = model.predict(images_batch)
    print("predicted label:",classes[np.argmax(batch_prediction[0])])

[MARKDOWN CELL]
# Plotting the Accuracy and Loss Graph

[CODE CELL]
accuracy = history.history["accuracy"]
val_accuracy = history.history["accuracy"]
loss = history.history["loss"]
val_loss = history.history["loss"]
epochs = range(1, len(accuracy) + 1)
plt.plot(epochs, accuracy, "go", label="Training accuracy")
plt.plot(epochs, val_accuracy, "g", label="Validation accuracy")
plt.title("Training and validation accuracy")
plt.xlabel("epochs")
plt.ylabel("accuracy")
plt.legend()
plt.figure()
plt.plot(epochs, loss, "b", label="Training loss")
plt.plot(epochs, val_loss, "y", label="Validation loss")
plt.title("Training and validation loss")
plt.xlabel("epochs")
plt.ylabel("loss")
plt.legend()
plt.show()

[MARKDOWN CELL]
**Inference from the Accuracy and Loss Graph**

From the graph we can see that Accuracy has increased  and
the Loss is decreasing drastically which is a good model

[MARKDOWN CELL]
# Prediction

[CODE CELL]
def predict(model, img):
    img_array = tf.keras.preprocessing.image.img_to_array(images[i].numpy())
    img_array = tf.expand_dims(img_array, 0)

    predictions = model.predict(img_array)

    predicted_class = classes[np.argmax(predictions[0])]
    confidence = round(100 * (np.max(predictions[0])), 2)
    return predicted_class, confidence

[CODE CELL]
plt.figure(figsize=(15, 15))
for images, labels in test_ds.take(1):
    for i in range(9):
        ax = plt.subplot(3, 3, i + 1)
        plt.imshow(images[i].numpy().astype("uint8"))

        predicted_class, confidence = predict(model, images[i].numpy())
        actual_class = classes[labels[i]]

        plt.title(f"Actual: {actual_class},\n Predicted: {predicted_class}.\n Confidence: {confidence}%")

        plt.axis("off")

[MARKDOWN CELL]
# Conclusion

 Almost most of the images have been Predicted Correctly
 Since this is a very small dataset this is a good Score
#If there were several images for the training data then there is good chance for better prediction
#Drop out With a learning rate 0.2 gives the best score

[CODE CELL]

